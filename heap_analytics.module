<?php

/**
 * @file
 * Drupal Module: Heap Analytics.
 *
 * @author: Iztok Smolič <http://drupal.org/user/123987>
 */

use Drupal\Component\Utility\Unicode;

define('HEAP_ANALYTICS_PAGES', "admin\nadmin/*\nbatch\nnode/add*\nnode/*/*\nuser/*/*");

/**
 * Implements hook_help().
 */
function heap_analytics_help($route_name) {
  switch ($route_name) {
    case 'heap_analytics.settings':
      return t('<a href="@heap_url">Heap</a> is an instant, retroactive analytics for web and iOS. No code for event tracking required.', array('@heap_url' => 'https://heapanalytics.com'));
  }
}

/**
 * Implements hook_page_attachments().
 */
function heap_analytics_page_attachments(&$page) {

  $user = \Drupal::currentUser();
  $config = \Drupal::config('heap_analytics.settings');
  $id = $config->get('heap_analytics_environment_id');
  $request = \Drupal::request();

  // Get page status code for visibility filtering.
  $status = NULL;
  if ($exception = $request->attributes->get('exception')) {
    $status = $exception->getStatusCode();
  }
  $trackable_status_codes = [
    '403', // Forbidden
    '404', // Not Found
  ];

  // 1. Check if the Heap environment ID is set.
  // 2. Track page views based on visibility value.
  // 3. Check if we should track the currently active user's role.
  // 4. Ignore pages visibility filter for 404 or 403 status codes.
  if (!empty($id) && (_heap_analytics_visibility_pages() || in_array($status, $trackable_status_codes)) && _heap_analytics_visibility_user($user)) {
    // Build tracker code.
    $script = 'window.heap=window.heap||[],heap.load=function(t,e){window.heap.appid=t,window.heap.config=e;var a=document.createElement("script");a.type="text/javascript",a.async=!0,a.src=("https:"===document.location.protocol?"https:":"http:")+"//cdn.heapanalytics.com/js/heap.js";var n=document.getElementsByTagName("script")[0];n.parentNode.insertBefore(a,n);for(var o=function(t){return function(){heap.push([t].concat(Array.prototype.slice.call(arguments,0)))}},p=["clearEventProperties","identify","setEventProperties","track","unsetEventProperty"],c=0;c&#060;p.length;c++)heap[p[c]]=o(p[c])};';
    $script .= 'heap.load("' . $id . '");';
    $page['#attached']['html_head'][] = [
      [
        '#tag' => 'script',
        '#value' => $script,
      ],
      'heap_analytics_tracking_script'
    ];
  }
}

/**
 * Tracking visibility check for an user object.
 */
function _heap_analytics_visibility_user($account) {

  $enabled = FALSE;

  // Is current user a member of a role that should be tracked?
  if (_heap_analytics_visibility_header($account) && _heap_analytics_visibility_roles($account)) {
    $enabled = TRUE;
  }

  return $enabled;
}

/**
 * Tracking visibility check for an user object based on the role.
 */
function _heap_analytics_visibility_roles($account) {

  $config = \Drupal::config('heap_analytics.settings');
  $visibility = $config->get('heap_analytics_visibility_roles');
  $enabled = $visibility;
  $roles = $config->get('heap_analytics_roles');

  if (array_sum($roles) > 0) {
    // One or more roles are selected.
    foreach (array_keys($account->roles) as $rid) {
      // Is the current user a member of one of these roles?
      if (isset($roles[$rid]) && $rid == $roles[$rid]) {
        // Current user is a member of a role that should be included/excluded.
        $enabled = !$visibility;
        break;
      }
    }
  }
  else {
    // No role is selected for tracking, therefore all roles should be tracked.
    $enabled = TRUE;
  }

  return $enabled;
}

/**
 * Tracking visibility check based on the current page url.
 */
function _heap_analytics_visibility_pages() {
  static $page_match;
  $config = \Drupal::config('heap_analytics.settings');

  // Cache visibility result if function is called more than once.
  if (!isset($page_match)) {

    $visibility = $config->get('heap_analytics_visibility_pages');
    $setting_pages = $config->get('heap_analytics_pages');

    // Match path if necessary.
    if (!empty($setting_pages)) {
      // Convert path to lowercase. This allows comparison of the same path
      // with different case. Ex: /Page, /page, /PAGE.
      $pages = Unicode::strtolower($setting_pages);
      if ($visibility < 2) {
        // Convert the Drupal path to lowercase.
        $path_alias = \Drupal::service('path.current')->getPath();
        $path = Unicode::strtolower($path_alias);
        // Compare the lowercase internal and lowercase path alias (if any).
        $page_match = \Drupal::service('path.matcher')->matchPath($path_alias, $pages);
        if ($path != $path_alias) {
          $page_match = $page_match || \Drupal::service('path.matcher')->matchPath($path_alias, $pages);
        }
        // When $visibility has a value of 0, the tracking code is displayed on
        // all pages except those listed in $pages. When set to 1, it
        // is displayed only on those pages listed in $pages.
        $page_match = !($visibility xor $page_match);
      }
      elseif (\Drupal::moduleHandler()->moduleExists('php')) {
        $page_match = php_eval($setting_pages);
      }
      else {
        $page_match = FALSE;
      }
    }
    else {
      $page_match = TRUE;
    }

  }
  return $page_match;
}

/**
 * Tracking visibility check based on headers send by clients.
 */
function _heap_analytics_visibility_header($account) {
  $config = \Drupal::config('heap_analytics.settings');

  if (($account->uid || $config->get('cache') == 0) && $config->get('heap_analytics_privacy_donottrack') && !empty($_SERVER['HTTP_DNT'])) {
    // Disable tracking if caching is disabled or a visitors is logged in and
    // have opted out from tracking via DNT (Do-Not-Track) header.
    return FALSE;
  }

  return TRUE;
}
